<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Hexo</title>
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2017-08-04T01:52:54.000Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>John Doe</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>获取iOS设备唯一标示UUID (转发来源简书)</title>
    <link href="http://yoursite.com/2017/04/21/%E8%8E%B7%E5%8F%96iOS%E8%AE%BE%E5%A4%87%E5%94%AF%E4%B8%80%E6%A0%87%E7%A4%BAUUID%20(%E8%BD%AC%E5%8F%91)/"/>
    <id>http://yoursite.com/2017/04/21/获取iOS设备唯一标示UUID (转发)/</id>
    <published>2017-04-21T01:30:00.000Z</published>
    <updated>2017-08-04T01:52:54.000Z</updated>
    
    <content type="html"><![CDATA[<p>在开发过程中，我们经常会被要求获取每个设备的唯一标示，以便后台做相应的处理。我们来看看有哪些方法来获取设备的唯一标示，然后再分析下这些方法的利弊。</p>
<p>具体可以分为如下几种：</p>
<ol>
<li>UDID</li>
<li>IDFA</li>
<li>IDFV</li>
<li>MAC</li>
<li>keychain</li>
</ol>
<hr>
<p>下面我们来具体分析下每种获取方法的利弊</p>
<h3 id="1、UDID"><a href="#1、UDID" class="headerlink" title="1、UDID"></a>1、UDID</h3><p>什么是UDID</p>
<p>UDID 「Unique Device Identifier Description」是由子母和数字组成的40个字符串的序号，用来区别每一个唯一的iOS设备，包括 iPhones, iPads, 以及 iPod touches，这些编码看起来是随机的，实际上是跟硬件设备特点相联系的，另外你可以到iTunes，pp助手或itools等软件查看你的udid（设备标识）</p>
<p>UDID是用来干什么的？</p>
<p>UDID可以关联其它各种数据到相关设备上。例如，连接到开发者账号，可以允许在发布前让设备安装或测试应用；也可以让开发者获得iOS测试版进行体验。苹果用UDID连接到苹果的ID，这些设备可以自动下载和安装从App Store购买的应用、保存从iTunes购买的音乐、帮助苹果发送推送通知、即时消息。 在iOS 应用早期，UDID被第三方应用开发者和网络广告商用来收集用户数据，可以用来关联地址、记录应用使用习惯……以便推送精准广告。</p>
<p>为什么苹果反对开发人员使用UDID？</p>
<p>iOS 2.0版本以后UIDevice提供一个获取设备唯一标识符的方法uniqueIdentifier，通过该方法我们可以获取设备的序列号，这个也是目前为止唯一可以确认唯一的标示符。 许多开发者把UDID跟用户的真实姓名、密码、住址、其它数据关联起来；网络窥探者会从多个应用收集这些数据，然后顺藤摸瓜得到这个人的许多隐私数据。同时大部分应用确实在频繁传输UDID和私人信息。 为了避免集体诉讼，苹果最终决定在iOS 5 的时候，将这一惯例废除，开发者被引导生成一个唯一的标识符，只能检测应用程序，其他的信息不提供。现在应用试图获取UDID已被禁止且不允许上架。</p>
<p>所以这个方法作废</p>
<h3 id="2、IDFA"><a href="#2、IDFA" class="headerlink" title="2、IDFA"></a>2、IDFA</h3><p>全名：advertisingIdentifier</p>
<p>获取代码：<br><code>#import &lt;AdSupport/AdSupport.h&gt;
  NSString *adId = [[[ASIdentifierManager sharedManager] advertisingIdentifier] UUIDString];</code><br>来源：iOS6.0及以后</p>
<p>说明：直译就是广告id， 在同一个设备上的所有App都会取到相同的值，是苹果专门给各广告提供商用来追踪用户而设的，用户可以在 设置|隐私|广告追踪 里重置此id的值，或限制此id的使用，故此id有可能会取不到值，但好在Apple默认是允许追踪的，而且一般用户都不知道有这么个设置，所以基本上用来监测推广效果，是戳戳有余了。</p>
<p>注意：由于idfa会出现取不到的情况，故绝不可以作为业务分析的主id，来识别用户。</p>
<h3 id="3、IDFV"><a href="#3、IDFV" class="headerlink" title="3、IDFV"></a>3、IDFV</h3><p>全名：identifierForVendor<br>获取代码：<br><code>NSString *idfv = [[[UIDevice currentDevice] identifierForVendor] UUIDString];</code><br>来源：iOS6.0及以后</p>
<p>说明：顾名思义，是给Vendor标识用户用的，每个设备在所属同一个Vender的应用里，都有相同的值。其中的Vender是指应用提供商，但准确点说，是通过BundleID的反转的前两部分进行匹配，如果相同就是同一个Vender，例如对于com.taobao.app1, com.taobao.app2 这两个BundleID来说，就属于同一个Vender，共享同一个idfv的值。和idfa不同的是，idfv的值是一定能取到的，所以非常适合于作为内部用户行为分析的主id，来标识用户，替代OpenUDID。</p>
<p>注意：如果用户将属于此Vender的所有App卸载，则idfv的值会被重置，即再重装此Vender的App，idfv的值和之前不同。</p>
<h3 id="4、MAC地址"><a href="#4、MAC地址" class="headerlink" title="4、MAC地址"></a>4、MAC地址</h3><p>使用WiFi的mac地址来取代已经废弃了的uniqueIdentifier方法。具体可见:<br><a href="http://stackoverflow.com/questions/677530/how-can-i-programmatically-get-the-mac-address-of-an-iphone" target="_blank" rel="external">http://stackoverflow.com/questions/677530/how-can-i-programmatically-get-the-mac-address-of-an-iphone</a></p>
<p>然而在iOS 7中苹果再一次无情的封杀mac地址，使用之前的方法获取到的mac地址全部都变成了02:00:00:00:00:00。</p>
<h3 id="5、Keychain"><a href="#5、Keychain" class="headerlink" title="5、Keychain"></a>5、Keychain</h3><p><img src="/img/277755-807a54b6dcbeb347.png" alt=""></p>
<p>我们可以获取到UUID，然后把UUID保存到KeyChain里面。</p>
<p>这样以后即使APP删了再装回来，也可以从KeyChain中读取回来。使用group还可以可以保证同一个开发商的所有程序针对同一台设备能够获取到相同的不变的UDID。</p>
<p>但是刷机或重装系统后uuid还是会改变。</p>
<p>把下面两个类文件放到你的项目中<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line">KeychainItemWrapper.h文件</div><div class="line">********************************</div><div class="line"></div><div class="line">#import &lt;UIKit/UIKit.h&gt;</div><div class="line"></div><div class="line">@interface KeychainItemWrapper : NSObject</div><div class="line">&#123;</div><div class="line">    NSMutableDictionary *keychainItemData;        // The actual keychain item data backing store.</div><div class="line">    NSMutableDictionary *genericPasswordQuery;    // A placeholder for the generic keychain item query used to locate the item.</div><div class="line">&#125;</div><div class="line"></div><div class="line">@property (nonatomic, retain) NSMutableDictionary *keychainItemData;</div><div class="line">@property (nonatomic, retain) NSMutableDictionary *genericPasswordQuery;</div><div class="line"></div><div class="line">// Designated initializer.</div><div class="line">- (id)initWithAccount:(NSString *)account service:(NSString *)service accessGroup:(NSString *) accessGroup;</div><div class="line"></div><div class="line">- (id)initWithIdentifier: (NSString *)identifier accessGroup:(NSString *) accessGroup;</div><div class="line">- (void)setObject:(id)inObject forKey:(id)key;</div><div class="line">- (id)objectForKey:(id)key;</div><div class="line"></div><div class="line">// Initializes and resets the default generic keychain item data.</div><div class="line">- (void)resetKeychainItem;</div><div class="line"></div><div class="line">@end</div></pre></td></tr></table></figure></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div><div class="line">150</div><div class="line">151</div><div class="line">152</div><div class="line">153</div><div class="line">154</div><div class="line">155</div><div class="line">156</div><div class="line">157</div><div class="line">158</div><div class="line">159</div><div class="line">160</div><div class="line">161</div><div class="line">162</div><div class="line">163</div><div class="line">164</div><div class="line">165</div><div class="line">166</div><div class="line">167</div><div class="line">168</div><div class="line">169</div><div class="line">170</div><div class="line">171</div><div class="line">172</div><div class="line">173</div><div class="line">174</div><div class="line">175</div><div class="line">176</div><div class="line">177</div><div class="line">178</div><div class="line">179</div><div class="line">180</div><div class="line">181</div><div class="line">182</div><div class="line">183</div><div class="line">184</div><div class="line">185</div><div class="line">186</div><div class="line">187</div><div class="line">188</div><div class="line">189</div><div class="line">190</div><div class="line">191</div><div class="line">192</div><div class="line">193</div><div class="line">194</div><div class="line">195</div><div class="line">196</div><div class="line">197</div><div class="line">198</div><div class="line">199</div><div class="line">200</div><div class="line">201</div><div class="line">202</div><div class="line">203</div><div class="line">204</div><div class="line">205</div><div class="line">206</div><div class="line">207</div><div class="line">208</div><div class="line">209</div><div class="line">210</div><div class="line">211</div><div class="line">212</div><div class="line">213</div><div class="line">214</div><div class="line">215</div><div class="line">216</div><div class="line">217</div><div class="line">218</div><div class="line">219</div><div class="line">220</div><div class="line">221</div><div class="line">222</div><div class="line">223</div><div class="line">224</div><div class="line">225</div><div class="line">226</div><div class="line">227</div><div class="line">228</div><div class="line">229</div><div class="line">230</div><div class="line">231</div><div class="line">232</div><div class="line">233</div><div class="line">234</div><div class="line">235</div><div class="line">236</div><div class="line">237</div><div class="line">238</div><div class="line">239</div><div class="line">240</div><div class="line">241</div><div class="line">242</div><div class="line">243</div><div class="line">244</div><div class="line">245</div><div class="line">246</div><div class="line">247</div><div class="line">248</div><div class="line">249</div><div class="line">250</div><div class="line">251</div><div class="line">252</div><div class="line">253</div><div class="line">254</div><div class="line">255</div><div class="line">256</div><div class="line">257</div><div class="line">258</div><div class="line">259</div><div class="line">260</div><div class="line">261</div><div class="line">262</div><div class="line">263</div><div class="line">264</div><div class="line">265</div><div class="line">266</div><div class="line">267</div><div class="line">268</div><div class="line">269</div><div class="line">270</div><div class="line">271</div><div class="line">272</div><div class="line">273</div><div class="line">274</div><div class="line">275</div><div class="line">276</div><div class="line">277</div><div class="line">278</div><div class="line">279</div><div class="line">280</div><div class="line">281</div><div class="line">282</div><div class="line">283</div><div class="line">284</div><div class="line">285</div><div class="line">286</div><div class="line">287</div><div class="line">288</div><div class="line">289</div><div class="line">290</div><div class="line">291</div><div class="line">292</div><div class="line">293</div><div class="line">294</div><div class="line">295</div><div class="line">296</div><div class="line">297</div><div class="line">298</div><div class="line">299</div><div class="line">300</div><div class="line">301</div><div class="line">302</div><div class="line">303</div><div class="line">304</div><div class="line">305</div><div class="line">306</div><div class="line">307</div><div class="line">308</div><div class="line">309</div><div class="line">310</div><div class="line">311</div><div class="line">312</div><div class="line">313</div><div class="line">314</div><div class="line">315</div><div class="line">316</div><div class="line">317</div><div class="line">318</div><div class="line">319</div><div class="line">320</div><div class="line">321</div><div class="line">322</div><div class="line">323</div><div class="line">324</div><div class="line">325</div><div class="line">326</div><div class="line">327</div><div class="line">328</div><div class="line">329</div><div class="line">330</div><div class="line">331</div><div class="line">332</div><div class="line">333</div><div class="line">334</div><div class="line">335</div><div class="line">336</div><div class="line">337</div><div class="line">338</div><div class="line">339</div><div class="line">340</div><div class="line">341</div><div class="line">342</div><div class="line">343</div><div class="line">344</div></pre></td><td class="code"><pre><div class="line">KeychainItemWrapper.h文件</div><div class="line">********************************</div><div class="line"></div><div class="line">#import &quot;KeychainItemWrapper.h&quot;</div><div class="line">#import &lt;Security/Security.h&gt;</div><div class="line"></div><div class="line">/*</div><div class="line"></div><div class="line">These are the default constants and their respective types,</div><div class="line">available for the kSecClassGenericPassword Keychain Item class:</div><div class="line"></div><div class="line">kSecAttrAccessGroup            -        CFStringRef</div><div class="line">kSecAttrCreationDate        -        CFDateRef</div><div class="line">kSecAttrModificationDate    -        CFDateRef</div><div class="line">kSecAttrDescription            -        CFStringRef</div><div class="line">kSecAttrComment                -        CFStringRef</div><div class="line">kSecAttrCreator                -        CFNumberRef</div><div class="line">kSecAttrType                -        CFNumberRef</div><div class="line">kSecAttrLabel                -        CFStringRef</div><div class="line">kSecAttrIsInvisible            -        CFBooleanRef</div><div class="line">kSecAttrIsNegative            -        CFBooleanRef</div><div class="line">kSecAttrAccount                -        CFStringRef</div><div class="line">kSecAttrService                -        CFStringRef</div><div class="line">kSecAttrGeneric                -        CFDataRef</div><div class="line"></div><div class="line">See the header file Security/SecItem.h for more details.</div><div class="line"></div><div class="line">*/</div><div class="line"></div><div class="line">@interface KeychainItemWrapper (PrivateMethods)</div><div class="line">/*</div><div class="line">The decision behind the following two methods (secItemFormatToDictionary and dictionaryToSecItemFormat) was</div><div class="line">to encapsulate the transition between what the detail view controller was expecting (NSString *) and what the</div><div class="line">Keychain API expects as a validly constructed container class.</div><div class="line">*/</div><div class="line">- (NSMutableDictionary *)secItemFormatToDictionary:(NSDictionary *)dictionaryToConvert;</div><div class="line">- (NSMutableDictionary *)dictionaryToSecItemFormat:(NSDictionary *)dictionaryToConvert;</div><div class="line"></div><div class="line">// Updates the item in the keychain, or adds it if it doesn&apos;t exist.</div><div class="line">- (void)writeToKeychain;</div><div class="line"></div><div class="line">@end</div><div class="line"></div><div class="line">@implementation KeychainItemWrapper</div><div class="line"></div><div class="line">@synthesize keychainItemData, genericPasswordQuery;</div><div class="line"></div><div class="line">- (id)initWithAccount:(NSString *)account service:(NSString *)service accessGroup:(NSString *) accessGroup;</div><div class="line">&#123;</div><div class="line">    if (self = [super init])</div><div class="line">    &#123;</div><div class="line">        NSAssert(account != nil || service != nil, @&quot;Both account and service are nil.  Must specifiy at least one.&quot;);</div><div class="line">        // Begin Keychain search setup. The genericPasswordQuery the attributes kSecAttrAccount and</div><div class="line">        // kSecAttrService are used as unique identifiers differentiating keychain items from one another</div><div class="line">        genericPasswordQuery = [[NSMutableDictionary alloc] init];</div><div class="line"></div><div class="line">        [genericPasswordQuery setObject:(id)kSecClassGenericPassword forKey:(id)kSecClass];</div><div class="line"></div><div class="line">        [genericPasswordQuery setObject:account forKey:(id)kSecAttrAccount];</div><div class="line">        [genericPasswordQuery setObject:service forKey:(id)kSecAttrService];</div><div class="line"></div><div class="line">        // The keychain access group attribute determines if this item can be shared</div><div class="line">        // amongst multiple apps whose code signing entitlements contain the same keychain access group.</div><div class="line">        if (accessGroup != nil)</div><div class="line">        &#123;</div><div class="line">#if TARGET_IPHONE_SIMULATOR</div><div class="line">            // Ignore the access group if running on the iPhone simulator.</div><div class="line">            //</div><div class="line">            // Apps that are built for the simulator aren&apos;t signed, so there&apos;s no keychain access group</div><div class="line">            // for the simulator to check. This means that all apps can see all keychain items when run</div><div class="line">            // on the simulator.</div><div class="line">            //</div><div class="line">            // If a SecItem contains an access group attribute, SecItemAdd and SecItemUpdate on the</div><div class="line">            // simulator will return -25243 (errSecNoAccessForItem).</div><div class="line">#else</div><div class="line">            [genericPasswordQuery setObject:accessGroup forKey:(id)kSecAttrAccessGroup];</div><div class="line">#endif</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        // Use the proper search constants, return only the attributes of the first match.</div><div class="line">        [genericPasswordQuery setObject:(id)kSecMatchLimitOne forKey:(id)kSecMatchLimit];</div><div class="line">        [genericPasswordQuery setObject:(id)kCFBooleanTrue forKey:(id)kSecReturnAttributes];</div><div class="line"></div><div class="line">        NSDictionary *tempQuery = [NSDictionary dictionaryWithDictionary:genericPasswordQuery];</div><div class="line"></div><div class="line">        NSMutableDictionary *outDictionary = nil;</div><div class="line"></div><div class="line">        if (! SecItemCopyMatching((CFDictionaryRef)tempQuery, (CFTypeRef *)&amp;outDictionary) == noErr)</div><div class="line">        &#123;</div><div class="line">            // Stick these default values into keychain item if nothing found.</div><div class="line">            [self resetKeychainItem];</div><div class="line"></div><div class="line">            //Adding the account and service identifiers to the keychain</div><div class="line">            [keychainItemData setObject:account forKey:(id)kSecAttrAccount];</div><div class="line">            [keychainItemData setObject:service forKey:(id)kSecAttrService];</div><div class="line"></div><div class="line">            if (accessGroup != nil)</div><div class="line">            &#123;</div><div class="line">#if TARGET_IPHONE_SIMULATOR</div><div class="line">                // Ignore the access group if running on the iPhone simulator.</div><div class="line">                //</div><div class="line">                // Apps that are built for the simulator aren&apos;t signed, so there&apos;s no keychain access group</div><div class="line">                // for the simulator to check. This means that all apps can see all keychain items when run</div><div class="line">                // on the simulator.</div><div class="line">                //</div><div class="line">                // If a SecItem contains an access group attribute, SecItemAdd and SecItemUpdate on the</div><div class="line">                // simulator will return -25243 (errSecNoAccessForItem).</div><div class="line">#else</div><div class="line">                [keychainItemData setObject:accessGroup forKey:(id)kSecAttrAccessGroup];</div><div class="line">#endif</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        else</div><div class="line">        &#123;</div><div class="line">            // load the saved data from Keychain.</div><div class="line">            self.keychainItemData = [self secItemFormatToDictionary:outDictionary];</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        [outDictionary release];</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    return self;</div><div class="line">&#125;</div><div class="line"></div><div class="line">- (id)initWithIdentifier: (NSString *)identifier accessGroup:(NSString *) accessGroup;</div><div class="line">&#123;</div><div class="line">    if (self = [super init])</div><div class="line">    &#123;</div><div class="line">        // Begin Keychain search setup. The genericPasswordQuery leverages the special user</div><div class="line">        // defined attribute kSecAttrGeneric to distinguish itself between other generic Keychain</div><div class="line">        // items which may be included by the same application.</div><div class="line">        genericPasswordQuery = [[NSMutableDictionary alloc] init];</div><div class="line"></div><div class="line">        [genericPasswordQuery setObject:(id)kSecClassGenericPassword forKey:(id)kSecClass];</div><div class="line">        [genericPasswordQuery setObject:identifier forKey:(id)kSecAttrGeneric];</div><div class="line"></div><div class="line">        // The keychain access group attribute determines if this item can be shared</div><div class="line">        // amongst multiple apps whose code signing entitlements contain the same keychain access group.</div><div class="line">        if (accessGroup != nil)</div><div class="line">        &#123;</div><div class="line">#if TARGET_IPHONE_SIMULATOR</div><div class="line">            // Ignore the access group if running on the iPhone simulator.</div><div class="line">            // </div><div class="line">            // Apps that are built for the simulator aren&apos;t signed, so there&apos;s no keychain access group</div><div class="line">            // for the simulator to check. This means that all apps can see all keychain items when run</div><div class="line">            // on the simulator.</div><div class="line">            //</div><div class="line">            // If a SecItem contains an access group attribute, SecItemAdd and SecItemUpdate on the</div><div class="line">            // simulator will return -25243 (errSecNoAccessForItem).</div><div class="line">#else            </div><div class="line">            [genericPasswordQuery setObject:accessGroup forKey:(id)kSecAttrAccessGroup];</div><div class="line">#endif</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        // Use the proper search constants, return only the attributes of the first match.</div><div class="line">        [genericPasswordQuery setObject:(id)kSecMatchLimitOne forKey:(id)kSecMatchLimit];</div><div class="line">        [genericPasswordQuery setObject:(id)kCFBooleanTrue forKey:(id)kSecReturnAttributes];</div><div class="line"></div><div class="line">        NSDictionary *tempQuery = [NSDictionary dictionaryWithDictionary:genericPasswordQuery];</div><div class="line"></div><div class="line">        NSMutableDictionary *outDictionary = nil;</div><div class="line"></div><div class="line">        if (! SecItemCopyMatching((CFDictionaryRef)tempQuery, (CFTypeRef *)&amp;outDictionary) == noErr)</div><div class="line">        &#123;</div><div class="line">            // Stick these default values into keychain item if nothing found.</div><div class="line">            [self resetKeychainItem];</div><div class="line"></div><div class="line">            // Add the generic attribute and the keychain access group.</div><div class="line">            [keychainItemData setObject:identifier forKey:(id)kSecAttrGeneric];</div><div class="line">            if (accessGroup != nil)</div><div class="line">            &#123;</div><div class="line">#if TARGET_IPHONE_SIMULATOR</div><div class="line">                // Ignore the access group if running on the iPhone simulator.</div><div class="line">                // </div><div class="line">                // Apps that are built for the simulator aren&apos;t signed, so there&apos;s no keychain access group</div><div class="line">                // for the simulator to check. This means that all apps can see all keychain items when run</div><div class="line">                // on the simulator.</div><div class="line">                //</div><div class="line">                // If a SecItem contains an access group attribute, SecItemAdd and SecItemUpdate on the</div><div class="line">                // simulator will return -25243 (errSecNoAccessForItem).</div><div class="line">#else            </div><div class="line">                [keychainItemData setObject:accessGroup forKey:(id)kSecAttrAccessGroup];</div><div class="line">#endif</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        else</div><div class="line">        &#123;</div><div class="line">            // load the saved data from Keychain.</div><div class="line">            self.keychainItemData = [self secItemFormatToDictionary:outDictionary];</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        [outDictionary release];</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    return self;</div><div class="line">&#125;</div><div class="line"></div><div class="line">- (void)dealloc</div><div class="line">&#123;</div><div class="line">    [keychainItemData release];</div><div class="line">    [genericPasswordQuery release];</div><div class="line"></div><div class="line">    [super dealloc];</div><div class="line">&#125;</div><div class="line"></div><div class="line">- (void)setObject:(id)inObject forKey:(id)key </div><div class="line">&#123;</div><div class="line">    if (inObject == nil) return;</div><div class="line">    id currentObject = [keychainItemData objectForKey:key];</div><div class="line">    if (![currentObject isEqual:inObject])</div><div class="line">    &#123;</div><div class="line">        [keychainItemData setObject:inObject forKey:key];</div><div class="line">        [self writeToKeychain];</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">- (id)objectForKey:(id)key</div><div class="line">&#123;</div><div class="line">    return [keychainItemData objectForKey:key];</div><div class="line">&#125;</div><div class="line"></div><div class="line">- (void)resetKeychainItem</div><div class="line">&#123;</div><div class="line">    OSStatus junk = noErr;</div><div class="line">    if (!keychainItemData) </div><div class="line">    &#123;</div><div class="line">        self.keychainItemData = [[NSMutableDictionary alloc] init];</div><div class="line">    &#125;</div><div class="line">    else if (keychainItemData)</div><div class="line">    &#123;</div><div class="line">        NSMutableDictionary *tempDictionary = [self dictionaryToSecItemFormat:keychainItemData];</div><div class="line">        junk = SecItemDelete((CFDictionaryRef)tempDictionary);</div><div class="line">        NSAssert( junk == noErr || junk == errSecItemNotFound, @&quot;Problem deleting current dictionary.&quot; );</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    // Default attributes for keychain item.</div><div class="line">    [keychainItemData setObject:@&quot;&quot; forKey:(id)kSecAttrAccount];</div><div class="line">    [keychainItemData setObject:@&quot;&quot; forKey:(id)kSecAttrLabel];</div><div class="line">    [keychainItemData setObject:@&quot;&quot; forKey:(id)kSecAttrDescription];</div><div class="line"></div><div class="line">    // Default data for keychain item.</div><div class="line">    [keychainItemData setObject:@&quot;&quot; forKey:(id)kSecValueData];</div><div class="line">&#125;</div><div class="line"></div><div class="line">- (NSMutableDictionary *)dictionaryToSecItemFormat:(NSDictionary *)dictionaryToConvert</div><div class="line">&#123;</div><div class="line">    // The assumption is that this method will be called with a properly populated dictionary</div><div class="line">    // containing all the right key/value pairs for a SecItem.</div><div class="line"></div><div class="line">    // Create a dictionary to return populated with the attributes and data.</div><div class="line">    NSMutableDictionary *returnDictionary = [NSMutableDictionary dictionaryWithDictionary:dictionaryToConvert];</div><div class="line"></div><div class="line">    // Add the Generic Password keychain item class attribute.</div><div class="line">    [returnDictionary setObject:(id)kSecClassGenericPassword forKey:(id)kSecClass];</div><div class="line"></div><div class="line">    // Convert the NSString to NSData to meet the requirements for the value type kSecValueData.</div><div class="line">    // This is where to store sensitive data that should be encrypted.</div><div class="line">    NSString *passwordString = [dictionaryToConvert objectForKey:(id)kSecValueData];</div><div class="line">    [returnDictionary setObject:[passwordString dataUsingEncoding:NSUTF8StringEncoding] forKey:(id)kSecValueData];</div><div class="line"></div><div class="line">    return returnDictionary;</div><div class="line">&#125;</div><div class="line"></div><div class="line">- (NSMutableDictionary *)secItemFormatToDictionary:(NSDictionary *)dictionaryToConvert</div><div class="line">&#123;</div><div class="line">    // The assumption is that this method will be called with a properly populated dictionary</div><div class="line">    // containing all the right key/value pairs for the UI element.</div><div class="line"></div><div class="line">    // Create a dictionary to return populated with the attributes and data.</div><div class="line">    NSMutableDictionary *returnDictionary = [NSMutableDictionary dictionaryWithDictionary:dictionaryToConvert];</div><div class="line"></div><div class="line">    // Add the proper search key and class attribute.</div><div class="line">    [returnDictionary setObject:(id)kCFBooleanTrue forKey:(id)kSecReturnData];</div><div class="line">    [returnDictionary setObject:(id)kSecClassGenericPassword forKey:(id)kSecClass];</div><div class="line"></div><div class="line">    // Acquire the password data from the attributes.</div><div class="line">    NSData *passwordData = NULL;</div><div class="line">    if (SecItemCopyMatching((CFDictionaryRef)returnDictionary, (CFTypeRef *)&amp;passwordData) == noErr)</div><div class="line">    &#123;</div><div class="line">        // Remove the search, class, and identifier key/value, we don&apos;t need them anymore.</div><div class="line">        [returnDictionary removeObjectForKey:(id)kSecReturnData];</div><div class="line"></div><div class="line">        // Add the password to the dictionary, converting from NSData to NSString.</div><div class="line">        NSString *password = [[[NSString alloc] initWithBytes:[passwordData bytes] length:[passwordData length] </div><div class="line">                                                     encoding:NSUTF8StringEncoding] autorelease];</div><div class="line">        [returnDictionary setObject:password forKey:(id)kSecValueData];</div><div class="line">    &#125;</div><div class="line">    else</div><div class="line">    &#123;</div><div class="line">        // Don&apos;t do anything if nothing is found.</div><div class="line">        NSAssert(NO, @&quot;Serious error, no matching item found in the keychain.\n&quot;);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    [passwordData release];</div><div class="line"></div><div class="line">    return returnDictionary;</div><div class="line">&#125;</div><div class="line"></div><div class="line">- (void)writeToKeychain</div><div class="line">&#123;</div><div class="line">    NSDictionary *attributes = NULL;</div><div class="line">    NSMutableDictionary *updateItem = NULL;</div><div class="line">    OSStatus result;</div><div class="line"></div><div class="line">    if (SecItemCopyMatching((CFDictionaryRef)genericPasswordQuery, (CFTypeRef *)&amp;attributes) == noErr)</div><div class="line">    &#123;</div><div class="line">        // First we need the attributes from the Keychain.</div><div class="line">        updateItem = [NSMutableDictionary dictionaryWithDictionary:attributes];</div><div class="line">        // Second we need to add the appropriate search key/values.</div><div class="line">        [updateItem setObject:[genericPasswordQuery objectForKey:(id)kSecClass] forKey:(id)kSecClass];</div><div class="line"></div><div class="line">        // Lastly, we need to set up the updated attribute list being careful to remove the class.</div><div class="line">        NSMutableDictionary *tempCheck = [self dictionaryToSecItemFormat:keychainItemData];</div><div class="line">        [tempCheck removeObjectForKey:(id)kSecClass];</div><div class="line"></div><div class="line">#if TARGET_IPHONE_SIMULATOR</div><div class="line">        // Remove the access group if running on the iPhone simulator.</div><div class="line">        // </div><div class="line">        // Apps that are built for the simulator aren&apos;t signed, so there&apos;s no keychain access group</div><div class="line">        // for the simulator to check. This means that all apps can see all keychain items when run</div><div class="line">        // on the simulator.</div><div class="line">        //</div><div class="line">        // If a SecItem contains an access group attribute, SecItemAdd and SecItemUpdate on the</div><div class="line">        // simulator will return -25243 (errSecNoAccessForItem).</div><div class="line">        //</div><div class="line">        // The access group attribute will be included in items returned by SecItemCopyMatching,</div><div class="line">        // which is why we need to remove it before updating the item.</div><div class="line">        [tempCheck removeObjectForKey:(id)kSecAttrAccessGroup];</div><div class="line">#endif</div><div class="line"></div><div class="line">        // An implicit assumption is that you can only update a single item at a time.</div><div class="line"></div><div class="line">        result = SecItemUpdate((CFDictionaryRef)updateItem, (CFDictionaryRef)tempCheck);</div><div class="line">        NSAssert( result == noErr, @&quot;Couldn&apos;t update the Keychain Item.&quot; );</div><div class="line">    &#125;</div><div class="line">    else</div><div class="line">    &#123;</div><div class="line">        // No previous item found; add the new one.</div><div class="line">        result = SecItemAdd((CFDictionaryRef)[self dictionaryToSecItemFormat:keychainItemData], NULL);</div><div class="line">        NSAssert( result == noErr, @&quot;Couldn&apos;t add the Keychain Item.&quot; );</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">@end</div></pre></td></tr></table></figure>
<p>我们在写一个工具类用来保存UUID到keychain和从keychain中读取UUID.</p>
<p><strong>实现代码</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line">#pragma mark - 保存和读取UUID</div><div class="line">+(void)saveUUIDToKeyChain&#123;</div><div class="line">    KeychainItemWrapper *keychainItem = [[KeychainItemWrapper alloc] initWithAccount:@&quot;Identfier&quot; service:@&quot;AppName&quot; accessGroup:nil];</div><div class="line">    NSString *string = [keychainItem objectForKey: (__bridge id)kSecAttrGeneric];</div><div class="line">    if([string isEqualToString:@&quot;&quot;] || !string)&#123;</div><div class="line">        [keychainItem setObject:[self getUUIDString] forKey:(__bridge id)kSecAttrGeneric];</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">+(NSString *)readUUIDFromKeyChain&#123;</div><div class="line">    KeychainItemWrapper *keychainItemm = [[KeychainItemWrapper alloc] initWithAccount:@&quot;Identfier&quot; service:@&quot;AppName&quot; accessGroup:nil];</div><div class="line">    NSString *UUID = [keychainItemm objectForKey: (__bridge id)kSecAttrGeneric];</div><div class="line">    return UUID;</div><div class="line">&#125;</div><div class="line"></div><div class="line">+ (NSString *)getUUIDString</div><div class="line">&#123;</div><div class="line">    CFUUIDRef uuidRef = CFUUIDCreate(kCFAllocatorDefault);</div><div class="line">    CFStringRef strRef = CFUUIDCreateString(kCFAllocatorDefault , uuidRef);</div><div class="line">    NSString *uuidString = [(__bridge NSString*)strRef stringByReplacingOccurrencesOfString:@&quot;-&quot; withString:@&quot;&quot;];</div><div class="line">    CFRelease(strRef);</div><div class="line">    CFRelease(uuidRef);</div><div class="line">    return uuidString;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>写入UUID到keychain</p>
<p>我们最好在程序启动之后把UUID写入到keychain，代码如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">- (BOOL)application:(UIApplication *)application didFinishLaunchingWithOptions:(NSDictionary *)launchOptions</div><div class="line">&#123;</div><div class="line">    [AppUtils saveUUIDToKeyChain];</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>读取UUID</p>
<p>在需要读取的地方直接调用AppUtils的类方法readUUIDFromKeyChain即可。</p>
<hr>
<p>1.让同一开发商的所有APP在同一台设备上获取到UUID相同</p>
<p>在每个APP的项目里面做如下设置</p>
<p>1.1、设置accessgroup<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">keychainItemWrapper *keychainItem = [[KeychainItemWrapper alloc] initWithAccount:@&quot;Identfier&quot; service:@&quot;AppName&quot; accessGroup:@&quot;YOUR_BUNDLE_SEED.com.yourcompany.userinfo&quot;];</div></pre></td></tr></table></figure></p>
<p>1.2、创建plist文件</p>
<p>然后在项目相同的目录下创建KeychainAccessGroups.plist文件。</p>
<p>该文件的结构是一个字典，其中中最顶层的节点必须是一个键为“keychain-access-groups”的Array，并且该Array中每一项都是一个描述分组的NSString。YOUR_BUNDLE_SEED.com.yourcompany.userinfo就是要设置的组名。</p>
<p>如图:<br><img src="/img/277755-72008ba008a56557.png" alt=""><br>1.3、 设置code signing</p>
<p>接着在Target—&gt;Build Settings—-&gt;Code Signing栏下的Code Signing Entitlements右侧添加KeychainAccessGroups.plist</p>
<p>如图：<br><img src="/img/277755-e736892057d71333.png" alt=""></p>
<p>这样就可以保证每个app都是从keychain中读取出来同一个UUID</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在开发过程中，我们经常会被要求获取每个设备的唯一标示，以便后台做相应的处理。我们来看看有哪些方法来获取设备的唯一标示，然后再分析下这些方法的利弊。&lt;/p&gt;
&lt;p&gt;具体可以分为如下几种：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;UDID&lt;/li&gt;
&lt;li&gt;IDFA&lt;/li&gt;
&lt;li&gt;IDF
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>IOS 开发经验总结(不定时更新)</title>
    <link href="http://yoursite.com/2017/03/21/IOS%20%E5%BC%80%E5%8F%91%E7%BB%8F%E9%AA%8C%E6%80%BB%E7%BB%93(%E4%B8%8D%E5%AE%9A%E6%97%B6%E6%9B%B4%E6%96%B0)/"/>
    <id>http://yoursite.com/2017/03/21/IOS 开发经验总结(不定时更新)/</id>
    <published>2017-03-21T06:00:00.000Z</published>
    <updated>2017-08-04T01:52:54.000Z</updated>
    
    <content type="html"><![CDATA[<p>1.使用Podfile管理Pods依赖库版本<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">pod &apos;AFNetworking&apos;      //不显式指定依赖库版本，表示每次都获取最新版本    </div><div class="line">pod &apos;AFNetworking&apos;, &apos;2.0&apos;     //只使用2.0版本    </div><div class="line">pod &apos;AFNetworking&apos;, &apos;&gt; 2.0&apos;     //使用高于2.0的版本    </div><div class="line">pod &apos;AFNetworking&apos;, &apos;&gt;= 2.0&apos;     //使用大于或等于2.0的版本    </div><div class="line">pod &apos;AFNetworking&apos;, &apos;&lt; 2.0&apos;     //使用小于2.0的版本    </div><div class="line">pod &apos;AFNetworking&apos;, &apos;&lt;= 2.0&apos;     //使用小于或等于2.0的版本    </div><div class="line">pod &apos;AFNetworking&apos;, &apos;~&gt; 0.1.2&apos;     //使用大于等于0.1.2但小于0.2的版本    </div><div class="line">pod &apos;AFNetworking&apos;, &apos;~&gt;0.1&apos;     //使用大于等于0.1但小于1.0的版本    </div><div class="line">pod &apos;AFNetworking&apos;, &apos;~&gt;0&apos;     //高于0的版本，写这个限制和什么都不写是一个效果，都表示使用最新版本</div></pre></td></tr></table></figure></p>
<h3 id="2-使用系统原生-nabber-backItem显示文字问题"><a href="#2-使用系统原生-nabber-backItem显示文字问题" class="headerlink" title="2.使用系统原生 nabber backItem显示文字问题"></a>2.使用系统原生 nabber backItem显示文字问题</h3><p>eg: A,B两个VC, A navItem.Title = 首页,A push 到 B, B的backItem Title 返回显示 <strong>首页</strong>，这里想更改这个文字 ，在A界面设置navitem 的 BackItem title = 返回，再push ，的backItem Title 显示 <strong>返回</strong>；使用原生的backItem 必须先提前设置backItem title;<br><code>self.navigationItem.backBarButtonItem = [UIBarButtonItem alloc] initWithTitle:&lt;#(nullable NSString *)#&gt; style:&lt;#(UIBarButtonItemStyle)#&gt; target:&lt;#(nullable id)#&gt; action:&lt;#(nullable SEL)#&gt;</code></p>
<h3 id="3-设置-uibarbuttonitem-image-时按钮变成蓝色"><a href="#3-设置-uibarbuttonitem-image-时按钮变成蓝色" class="headerlink" title="3.  设置 uibarbuttonitem image 时按钮变成蓝色"></a>3.  设置 uibarbuttonitem image 时按钮变成蓝色</h3><p>*着色（Tint Color）是iOS7界面中的一个.设置UIImage的渲染模式：UIImage.renderingMode重大改变，你可以设置一个UIImage在渲染时是否使用当前视图的Tint Color。UIImage新增了一个只读属性：renderingMode，对应的还有一个新增方法：imageWithRenderingMode:，它使用UIImageRenderingMode枚举值来设置图片的renderingMode属性。该枚举中包含下列值：</p>
<p>UIImageRenderingModeAutomatic   根据图片的使用环境和所处的绘图上下文自动调整渲染模式。<br>UIImageRenderingModeAlwaysOriginal    始终绘制图片原始状态，不使用Tint Color。<br>UIImageRenderingModeAlwaysTemplate    始终根据Tint Color绘制图片，忽略图片的颜色信息。  </p>
<p>renderingMode属性的默认值是UIImageRenderingModeAutomatic，即UIImage是否使用Tint Color取决于它显示的位置。其他情况可以看下面的图例<em><br>设置selectedImage 的 renderingMode 为UIImageRenderingModeAlwaysOriginal<br>UIImage </em>selectedImage=[UIImage imageNamed: @”btn_nav_share_lawyer”];<br>        selectedImage = [selectedImage imageWithRenderingMode:UIImageRenderingModeAlwaysOriginal];<br>  创建baritem<br> shareBarBtn = [[UIBarButtonItem alloc] initWithImage:selectedImage style:UIBarButtonItemStyleDone target:self action:@selector(shareAction)];</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;1.使用Podfile管理Pods依赖库版本&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Xcode 创建自定义模板 (来源网络)</title>
    <link href="http://yoursite.com/2017/03/17/Xcode%20%E5%88%9B%E5%BB%BA%E8%87%AA%E5%AE%9A%E4%B9%89%E6%A8%A1%E6%9D%BF%20(%E7%BD%91%E7%BB%9C)/"/>
    <id>http://yoursite.com/2017/03/17/Xcode 创建自定义模板 (网络)/</id>
    <published>2017-03-17T04:00:00.000Z</published>
    <updated>2017-08-04T01:52:54.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="1-模板方案路径"><a href="#1-模板方案路径" class="headerlink" title="1 模板方案路径"></a>1 模板方案路径</h3><p>系统模板的路径（Xcode7）_Applications_Xcode.app_Contents_Developer_Library_Xcode_Templates_File Templates在这个目录下；<br><img src="/img/1693553-98812f12b7414336.png" alt=""><br>其中的Core Data、Other、Resource、Source和User Interface对应着<br><img src="/img/1693553-0bed79c964adb6dc.png" alt=""></p>
<h3 id="BaseVC-xctemplate介绍"><a href="#BaseVC-xctemplate介绍" class="headerlink" title="BaseVC.xctemplate介绍"></a>BaseVC.xctemplate介绍</h3><p>假设已经将BaseVC.xctemplate放入了Source文件夹中，查看BaseVC.xctemplate中有<br>（1）BaseViewControllerObjective-C 文件夹<br>用来创建.h 和 .m文件。 其中文件夹的命名规范是[name]+Objective-C. 如果是创建swift修改为swift。<br>（2）BaseViewControllerXibObjective-C文件夹<br>用来创建.h，.m和.xib文件。其中文件夹的命名规范是[name]+XibObjective-C. swift类似。<br>（3）TemplateIcon图片<br>图片是用来显示在New File的菜单上的。任意放一个自己喜欢的图片，像素138*138即可。<br>（4）TemplateInfo.plist<br>配置文件。下面单独讲讲。</p>
<h3 id="3-FILEBASENAME-h"><a href="#3-FILEBASENAME-h" class="headerlink" title="3.FILEBASENAME.h"></a>3.<strong><em>FILEBASENAME</em></strong>.h</h3><p>内容为</p>
<p>  <strong><em>FILENAME</em></strong><br>  <strong><em>PROJECTNAME</em></strong></p>
<p>  Created by <strong><em>FULLUSERNAME</em></strong> on <strong><em>DATE</em></strong>.<br><strong><em>COPYRIGHT</em></strong></p>
<p>#import “<strong>_VARIABLE<em>cocoaTouchSubclass</em></strong>.h”</p>
<p>@interface <strong><em>FILEBASENAMEASIDENTIFIER</em></strong> : <strong>_VARIABLE<em>cocoaTouchSubclass</em></strong></p>
<p>@end<br>里面的参数在生成h文件时，系统会替换了输入的文件名。具体都是什么含义，大家可以自行Google了。</p>
<h3 id="4-FILEBASENAME-m"><a href="#4-FILEBASENAME-m" class="headerlink" title="4. FILEBASENAME.m"></a>4. <strong><em>FILEBASENAME</em></strong>.m</h3><p>内容为</p>
<p>  <strong><em>FILENAME</em></strong><br>  <strong><em>PROJECTNAME</em></strong></p>
<p>  Created by <strong><em>FULLUSERNAME</em></strong> on <strong><em>DATE</em></strong>.<br><strong><em>COPYRIGHT</em></strong></p>
<p>#import “<strong><em>FILEBASENAME</em></strong>.h”<br> Controllers<br> Model<br> Views</p>
<p>#define &lt;#macro#&gt; &lt;#value#&gt;</p>
<p>@interface <strong><em>FILEBASENAMEASIDENTIFIER</em></strong> ()</p>
<p>@property (nonatomic, strong) &lt;#type#&gt; *&lt;#name#&gt;<br>@end<br>@implementation <strong><em>FILEBASENAMEASIDENTIFIER</em></strong></p>
<p>#pragma mark - View Controller LifeCyle</p>
<ul>
<li>[ ] (instancetype)initWithCoder:(NSCoder *)coder<br>{<br>  self = [super initWithCoder:coder];<br>  if (self) {<br>  }<br>  return self;<br>}   </li>
<li><p>[ ] (void)viewDidLoad<br>{<br>  [super viewDidLoad];</p>
<p>  [self initialNavigationBar];<br>}</p>
</li>
<li>[ ] (void)viewDidAppear:(BOOL)animated<br>{<br>  [super viewDidAppear:animated];<br>}</li>
<li><p>[ ] (void)viewWillDisappear:(BOOL)animated<br>{<br>  [super viewWillDisappear:animated];<br>}</p>
</li>
<li><p>[ ] (void)didReceiveMemoryWarning<br>{<br>  [super didReceiveMemoryWarning];</p>
<p>  [[SDImageCache sharedImageCache] setValue:nil forKey:@”memCache”];<br>}</p>
</li>
<li><p>[ ] (void)dealloc<br>{<br>  [[NSNotificationCenter defaultCenter] removeObserver:self];<br>}<br>#pragma mark - Override</p>
</li>
</ul>
<p>#pragma mark - Initial Methods</p>
<ul>
<li>[ ] (void)initialNavigationBar<br>{<br>  self.navigationItem.title = &lt;#title#&gt;;<br>}</li>
</ul>
<p>#pragma mark - Target Methods</p>
<p>#pragma mark - Notification Methods</p>
<p>#pragma mark - KVO Methods</p>
<p>#pragma mark - UITableViewDelegate, UITableViewDataSource</p>
<p>#pragma mark - Privater Methods</p>
<p>#pragma mark - Setter Getter Methods</p>
<p>@end<br>按编程规范编写的，大家可以自行修改，New File后将自动生成你修改的内容。</p>
<h3 id="5-TemplateInfo-plist"><a href="#5-TemplateInfo-plist" class="headerlink" title="5. TemplateInfo.plist"></a>5. TemplateInfo.plist</h3><p><img src="/img/1693553-0ed0fdac87c08112.png" alt=""><br>SortOrder 这个是排序的值，可以设置在界面中的摆放位置<br>Options中的Item0，Item1，Item2，Item3 对应了<br><img src="/img/1693553-d8e6c07058f379f0-1.png" alt=""><br>自定义的BaseViewController的类，当然可以使用系统或自己定义。<br>BaseViewController的后缀。选择后，自动在Class后面添加ViewController的后缀。<br>是否生成Xib文件，默认是ture。当选择了BaseViewController时，可以进行checkout，不然不可选，不生成Xib文件。</p>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;1-模板方案路径&quot;&gt;&lt;a href=&quot;#1-模板方案路径&quot; class=&quot;headerlink&quot; title=&quot;1 模板方案路径&quot;&gt;&lt;/a&gt;1 模板方案路径&lt;/h3&gt;&lt;p&gt;系统模板的路径（Xcode7）_Applications_Xcode.app_Content
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>IOS面试题(初级)</title>
    <link href="http://yoursite.com/2017/03/03/IOS%E9%9D%A2%E8%AF%95%E9%A2%98(%E5%88%9D%E7%BA%A7)/"/>
    <id>http://yoursite.com/2017/03/03/IOS面试题(初级)/</id>
    <published>2017-03-03T06:40:15.000Z</published>
    <updated>2017-08-04T01:52:54.000Z</updated>
    
    <content type="html"><![CDATA[<p><strong>近日身边的朋友都在找工作，于是我在网上找了一些面试题目。(题目来源于网络)</strong></p>
<ol>
<li>Object-c的类可以多重继承么?可以实现多个接口么?Category是什么?重写一个类的方式用继承好还是分类好?为什么?</li>
<li>#import 跟#include 又什么区别，@class呢, #import&lt;&gt; 跟 #import””又什么区别?</li>
<li>属性readwrite，readonly，assign，retain，copy，nonatomic 各是什么作用，在那种情况下用?</li>
<li>写一个setter方法用于完成@property (nonatomic,retain)NSString <em>name,写一个setter方法用于完成@property(nonatomic，copy)NSString </em>name</li>
<li>对于语句NSString*obj = [[NSData alloc] init]; obj在编译时和运行时分别时什么类型的对象?</li>
<li>常见的object-c的数据类型有那些， 和C的基本数据类型有什么区别?如：NSInteger和int</li>
<li>id 声明的对象有什么特性?</li>
<li>Objective-C如何对内存管理的,说说你的看法和解决方法?</li>
<li>内存管理的几条原则时什么?按照默认法则.那些关键字生成的对象需要手动释放?在和property结合的时候怎样有效的避免内存泄露?</li>
<li>如何对iOS设备进行性能测试?</li>
<li>Object C中创建线程的方法是什么?如果在主线程中执行代码，方法是什么?如果想延时执行代码、方法又是什么?</li>
<li>MVC设计模式是什么？ 你还熟悉什么设计模式？</li>
<li>浅复制和深复制的区别?</li>
<li>类别的作用?继承和类别在实现中有何区别?</li>
<li>类别和类扩展的区别。</li>
<li>什么是KVO和KVC?</li>
<li>代理的作用?</li>
<li>oc中可修改和不可以修改类型。</li>
<li>我们说的oc是动态运行时语言是什么意思?</li>
<li>通知和协议的不同之处?</li>
<li>什么是推送消息?</li>
<li>关于多态性</li>
<li>对于单例的理解</li>
<li>frame和bounds有什么不同?</li>
<li>方法和选择器有何不同?</li>
<li>OC的垃圾回收机制?</li>
<li>NSOperation queue?</li>
<li>什么是延迟加载?</li>
<li>在iPhone应用中如何保存数据?</li>
<li>什么是谓词?</li>
<li>iOS 中的多线程</li>
<li>谈谈Object-C的内存管理方式及过程？</li>
<li>Object-C有多继承吗？没有的话用什么代替？cocoa 中所有的类都是NSObject 的子类</li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt;近日身边的朋友都在找工作，于是我在网上找了一些面试题目。(题目来源于网络)&lt;/strong&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Object-c的类可以多重继承么?可以实现多个接口么?Category是什么?重写一个类的方式用继承好还是分类好?为什么?&lt;/li&gt;
&lt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>使用SourceTree&amp;Github 碰到的问题</title>
    <link href="http://yoursite.com/2017/03/02/%E4%BD%BF%E7%94%A8SourceTree&amp;Github%20%E7%A2%B0%E5%88%B0%E7%9A%84%E9%97%AE%E9%A2%98/"/>
    <id>http://yoursite.com/2017/03/02/使用SourceTree&amp;Github 碰到的问题/</id>
    <published>2017-03-02T06:40:15.000Z</published>
    <updated>2017-08-04T01:52:54.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="使用github-创建一个空白仓库时，使用sourcetree克隆下来的分支里面找不到master分支，错误提示：fatal-Not-a-valid-object-name-‘master’"><a href="#使用github-创建一个空白仓库时，使用sourcetree克隆下来的分支里面找不到master分支，错误提示：fatal-Not-a-valid-object-name-‘master’" class="headerlink" title="使用github 创建一个空白仓库时，使用sourcetree克隆下来的分支里面找不到master分支，错误提示：fatal: Not a valid object name: ‘master’"></a>使用github 创建一个空白仓库时，使用sourcetree克隆下来的分支里面找不到master分支，错误提示：fatal: Not a valid object name: ‘master’</h3><p><em>解决方案 :</em></p>
<pre><code>1. `git init`  初始化这个仓库
2. `git --bare init`  清空这个仓库
</code></pre><p>这时打开SourceTree，<strong>未暂存文件</strong>里面会出来多个文件，提交这些文件后，master 就正常显示了。<br><strong>注：不知道是不是只有我碰到这类问题</strong></p>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;使用github-创建一个空白仓库时，使用sourcetree克隆下来的分支里面找不到master分支，错误提示：fatal-Not-a-valid-object-name-‘master’&quot;&gt;&lt;a href=&quot;#使用github-创建一个空白仓库时，使用sour
    
    </summary>
    
    
  </entry>
  
</feed>
